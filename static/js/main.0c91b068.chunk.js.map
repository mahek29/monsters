{"version":3,"sources":["component/card/card-component.jsx","component/card-list/card-list.jsx","component/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACG,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,YCFbC,EAAW,SAACR,GAErB,OACA,qBAAKC,UAAY,YAAjB,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC5B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACrB,uBACCZ,UAAY,SACZa,KAAK,SACJF,YAAcA,EACdG,SAAYF,MCqCHG,E,kDAtCb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTR,SAAU,GACVS,YAAc,IAJL,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAU,CAACf,SAAWc,S,oBAE5C,WAAS,IAAD,SACuBE,KAAKR,MAA3BR,EADD,EACCA,SAASS,EADV,EACUA,YACVQ,EAAmBjB,EAASkB,QAAQ,SAAAvB,GAAO,OAC/CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OAEE,sBAAK3B,UAAU,MAAf,UACA,oBAAIA,UAAU,QAAd,gCACC,cAAE,EAAF,CAAYW,YAAY,kBACxBC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAcY,EAAEC,OAAOC,WAE5D,cAAE,EAAF,CAAWvB,SAAYiB,W,GA1BZO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0c91b068.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card-styles.css\"\r\n\r\nexport const Card = props=> (\r\n    <div className='card-container'>\r\n       <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180` }/>\r\n        <h1 >{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n\r\n    </div>\r\n)","import React from \"react\";\r\nimport \"./card-list.css\";\r\nimport { Card } from \"../card/card-component\";\r\n \r\n\r\nexport const CardList = (props) =>\r\n{\r\n    return (\r\n    <div className = \"card-list\"> \r\n      { props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} ></Card>\r\n      ))}\r\n     </div>\r\n    )\r\n};","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder , handleChange}) => (\r\n    <input\r\n     className = 'search'\r\n     type='search'\r\n      placeholder= {placeholder} \r\n      onChange = {handleChange} />\r\n);","import React, { Component } from \"react\";\n\nimport './App.css';\nimport { CardList } from \"./component/card-list/card-list\";\nimport { SearchBox } from \"./component/search-box/search-box\";\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters: [ ],\n      searchField : ''\n    };\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState ({monsters : users}))\n  }\n  render(){\n    const {monsters,searchField}=this.state;\n    const filteredMonsters = monsters.filter( monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    \n    return (\n     \n      <div className=\"App\">\n      <h1 className=\"style\" > MONSTERS ROLODEX </h1> \n       < SearchBox placeholder='search monsters' \n       handleChange = {e => this.setState({ searchField : e.target.value})} />\n\n       < CardList monsters = {filteredMonsters}>\n\n       \n       </CardList>\n      \n     </div>\n\n    );\n  }\n}\n    \n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}